{"version":3,"sources":["components/navbar.jsx","components/addscore.jsx","components/scorebar.jsx","components/scorelist.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","onOrderScores","props","className","href","onClick","Component","AddScoreForm","createScore","e","preventDefault","name","refs","scorename","value","score","parseInt","scorescore","length","addScore","scoreForm","reset","render","ref","onSubmit","for","type","id","placeholder","ScoreBar","this","onNewScore","orderScore","onChangeOrder","ScoreList","Object","keys","scores","map","onRemoveScore","bind","App","state","key","handleNewScore","newScore","Date","getTime","push","sort","a","b","setState","handleRemoveScore","i","splice","handleOrderScore","temp","Fragment","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4e488d6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass NavBar extends Component {\r\n    render () {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                <h2>Scoreboard </h2>\r\n                <h7 className=\"font-italic\" >A highscore scoreboard for a game</h7>\r\n                <div className=\"form-group\">\r\n                    <button onClick={() =>this.onOrderScores()} className={\"btn btn-primary\"} >Change Order</button>\r\n                </div>\r\n \r\n            </a>\r\n        </nav>\r\n    );\r\n    }\r\n\r\n    onOrderScores= () =>{\r\n        return this.props.onOrderScores()\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default NavBar;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass AddScoreForm extends Component {\r\n    createScore = (e) =>  {\r\n        e.preventDefault();\r\n        //This refs method seems to be outdated but im using it here!\r\n        let name = this.refs.scorename.value;\r\n        let score = parseInt(this.refs.scorescore.value, 10);\r\n        //checks if the text input is empty\r\n        if(typeof name === 'string' && name.length > 0 && score) {\r\n            this.props.addScore(name, score);\r\n            //resets after use\r\n            this.refs.scoreForm.reset();\r\n        }\r\n        \r\n    };\r\n\r\n    render  = () =>  {\r\n        return(\r\n            <form className=\"form-inline\" ref=\"scoreForm\" onSubmit={this.createScore}>\r\n                <div className=\"form-group\">\r\n                    <label for=\"portfolioItem\">\r\n                        Add Name:\r\n                        <input type=\"text\" id=\"name\" placeholder=\"Name\" ref=\"scorename\" className=\"form-control m-2\" />\r\n                        Add Score:\r\n                        <input type=\"number\" id=\"score\" placeholder=\"Score\" ref=\"scorescore\" className=\"form-control m-2\" />\r\n                    </label>\r\n                </div>\r\n                <button type=\"submit\" className={\"btn btn-primary\"}>Add Score</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AddScoreForm;\r\n","import React, {Component} from 'react';\r\nimport AddScoreForm from \"./addscore\";\r\n\r\nclass ScoreBar extends Component {\r\n    render () {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                <h2>Add your score </h2>\r\n            </a>\r\n            <div className=\"navbar navbar-light m-2 \">\r\n                <AddScoreForm\r\n                    /* A popup button where you add portfolios*/\r\n                    addScore = {this.props.onNewScore}\r\n                    orderScore = {this.props.onChangeOrder}\r\n                />\r\n            </div>\r\n        </nav>\r\n    );\r\n    }\r\n}\r\n\r\nexport default ScoreBar;\r\n","import React, {Component} from 'react';\r\nimport { Trash } from 'react-bootstrap-icons';\r\nclass ScoreList extends Component {\r\n    render=()=>{\r\n        return (\r\n            <div className=\"container\">\r\n                <ul className=\"text-center\">\r\n                    {\r\n                        Object.keys(this.props.scores).map(function(score) {\r\n                            return (\r\n                                <div ref= {this.props.scores[score].score} >\r\n                                    <li className=\"list-group-item m-2\">\r\n                                        <div className=\"navbar navbar-light  \">\r\n                                            <div className=\"col-lg\">\r\n                                                <h1>Name: {this.props.scores[score].name}</h1>\r\n                                            </div>\r\n                                            <div className=\"col-lg\">\r\n                                                <h1>Score: {this.props.scores[score].score}</h1>\r\n                                            </div>\r\n                                            <div className=\"col-sm\">\r\n                                                <button onClick= {() => this.onRemoveScore(this.props.scores[score].id)} className=\"close\"> <Trash /></button>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </li>\r\n                                </div>)\r\n                        }.bind(this))\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    };\r\n    //The remove Score button in /App\r\n    onRemoveScore(id){\r\n        return this.props.onRemoveScore(id)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ScoreList;\r\n","import React, { Component } from 'react';\nimport NavBar from \"./components/navbar\";\nimport ScoreBar from \"./components/scorebar\";\nimport ScoreList from './components/scorelist'\nimport './App.css';\n\nclass App extends Component {\n    //State to save scores and names\n    state = {\n        scores:[\n          {\n            id:123,\n            score: 54,\n            name: \"Pirates\",\n            key: 45+\"Pirates\"\n          },\n          {\n            id:1234,\n            score: 45,\n            name: \"Ninjas\",\n            key: 54+\"Ninjas\"\n          },\n        ],\n    };\n\n    //Handle new scores. Started at addscore when Add Score button is pressed.\n    handleNewScore = (name, score) => {\n      const scores = [...this.state.scores];\n      let timestamp = (new Date()).getTime();\n      const newScore = {\n          id:'score-' + timestamp,\n          score: score,\n          name: name,\n          key: score+name\n      };\n      scores.push(newScore);\n      \n    //Sorting of the scores\n      scores.sort(function (a, b) {\n        if (a.score > b.score) {\n            return -1;\n        }\n        if (b.score > a.score) {\n            return 1;\n        }\n        return 0;\n    });\n    this.setState({ scores })\n    };\n\n    //Handle removing of Scores. Started at scorelist by pressing the trashcan.\n    handleRemoveScore = (id) => {\n      for (let i=0; i<this.state.scores.length; i++){\n          let scoreId = this.state.scores[i].id;\n          if (scoreId === id) {\n              this.state.scores.splice(i,1)\n          }\n          this.setState( this.state )\n      }\n    };\n  \n    //Handle ordering of scores switches between descending and ascending.\n    handleOrderScore = (e) => {\n      this.state.scores.sort(function (a, b) {\n        if (a.score<b.score){\n          var temp = a\n          a = b\n          b = temp\n        }\n        if (a.score > b.score) {\n            return -1;\n        }\n        if (b.score > a.score) {\n            return 1;\n        }\n        return 0;\n    });\n      this.setState( this.state )\n  };\n\n    render() {\n    return (\n        <React.Fragment>\n            <NavBar\n            onOrderScores={this.handleOrderScore}\n            />\n            <main className=\"container\">\n                <div className=\"component-wrapper\">\n                    <ScoreList\n                        scores={this.state.scores}\n                        onRemoveScore={this.handleRemoveScore}\n                    />\n                </div>\n            </main>\n            <ScoreBar\n                onNewScore={this.handleNewScore}\n                onChangeOrder={this.handleOrderScore}\n            />\n        </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//ReactDOM.render(\n//  <React.StrictMode>\n//    <App />\n//  </React.StrictMode>,\n//  document.getElementById('root')\n//);\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}